#ifndef MAINWINDOW_H
#define MAINWINDOW_H

/**
 * @file mainwindow.h
 * @brief This file defines the MainWindow class, which manages the game's user interface.
 *
 * It handles button clicks, updates the game state based on player input,
 * and plays sound effects for user feedback. It also manages the game's
 * progress bar and displays the game-over state when the player loses.
 *
 * Source Used:
 * https://doc.qt.io/qt-6/qmediaplayer.html
 * Used this source to figure out how to use the library of QMediaPlayer and QAudioOutput
 * for the functionality of button sounds.
 *
 * @date 03/13/2025
 */

#include "model.h"

#include <QMainWindow>
#include <QMediaPlayer>
#include <QAudioOutput>

QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

/**
 * @class MainWindow
 * @brief The MainWindow class manages the game's user interface.
 *
 * It handles user interactions, updates the game state based on input,
 * and provides visual and audio feedback to the player.
 */
class MainWindow : public QMainWindow {
    Q_OBJECT

public:

    /**
     * @brief Constructs a new MainWindow object.
     * @param model A pointer to the game model.
     * @param parent A pointer to the parent widget (default is nullptr).
     */
    MainWindow(Model* model, QWidget* parent = nullptr);

    /**
     * @brief Destroys the MainWindow object.
     */
    ~MainWindow();

private:

    /**
     * @brief Pointer to the UI generated by Qt Designer.
     */
    Ui::MainWindow* ui;

    /**
     * @brief Media player for the red button sound effect.
     */
    QMediaPlayer* redButtonAudio;

    /**
     * @brief Media player for the blue button sound effect.
     */
    QMediaPlayer* blueButtonAudio;

    /**
     * @brief Audio output for the red button sound effect.
     */
    QAudioOutput* redAudioOutput;

    /**
     * @brief Audio output for the blue button sound effect.
     */
    QAudioOutput* blueAudioOutput;

public slots:

    /**
     * @brief Shows the game buttons when the game starts.
     */
    void showGameButtons();

    /**
     * @brief Hides the start button and welcome label when the game starts.
     */
    void hideGameButtons();

    /**
     * @brief Enables or disables the game buttons based on the player's turn.
     * @param isTurn True if it's the player's turn, false otherwise.
     */
    void updateGameButtonState(bool isTurn);

    /**
     * @brief Flashes a button during the computer's turn.
     * @param buttonID The ID of the button to flash (0 for red, 1 for blue).
     * @param speedFactor The time interval between moves in milliseconds.
     */
    void flashButton(int buttonID, int speedFactor);

    /**
     * @brief Handles the red button click.
     */
    void onRedButtonClicked();

    /**
     * @brief Handles the blue button click.
     */
    void onBlueButtonClicked();

    /**
     * @brief Updates the progress bar.
     * @param progress The current progress value (0â€“100).
     */
    void setProgressBar(int progress);

    /**
     * @brief Disables all buttons and ends the game.
     */
    void onGameOver();

signals:

    /**
     * @brief Emitted when the player clicks a button.
     * @param buttonID The ID of the button that was clicked (0 for red, 1 for blue).
     */
    void buttonPressed(int buttonID);
};

#endif // MAINWINDOW_H
